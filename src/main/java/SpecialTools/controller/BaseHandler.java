package SpecialTools.controller;

import SpecialTools.service.TokenService;
import com.sun.net.httpserver.HttpExchange;
import org.slf4j.Logger;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Optional;

public abstract class BaseHandler {

    protected boolean checkPostMethod(HttpExchange exchange, Logger logger) throws IOException {
        if (!exchange.getRequestMethod().equalsIgnoreCase("POST")) {
            logger.warn("‚ö†Ô∏è –ú–µ—Ç–æ–¥ {} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", exchange.getRequestMethod());
            exchange.sendResponseHeaders(405, -1);
            return false;
        }
        return true;
    }

    protected Map<String, String> parseRequestBody(HttpExchange exchange) throws IOException {
        String body = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);
        return FormParser.parse(body);
    }

    protected void sendResponse(HttpExchange exchange, int statusCode, String responseText, Logger logger) throws IOException {
        logger.info("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º {}: {}", statusCode, responseText);
        byte[] response = responseText.getBytes(StandardCharsets.UTF_8);
        exchange.sendResponseHeaders(statusCode, response.length);
        try (OutputStream os = exchange.getResponseBody()) {
            os.write(response);
        }
    }

    protected Optional<String> authenticateUser(HttpExchange exchange, Logger logger) throws IOException {
        if (!checkPostMethod(exchange, logger)) {
            return Optional.empty();
        }

        String authHeader = exchange.getRequestHeaders().getFirst("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            logger.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
            sendResponse(exchange, 401, "‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", logger);
            return Optional.empty();
        }

        String token = authHeader.substring("Bearer ".length());
        TokenService tokenService = new TokenService();
        if (!tokenService.validateToken(token)) {
            logger.warn("‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {}", token);
            sendResponse(exchange, 401, "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω", logger);
            return Optional.empty();
        }

        String login = tokenService.extractLogin(token);
        logger.info("üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", login);
        return Optional.of(login);
    }

}
