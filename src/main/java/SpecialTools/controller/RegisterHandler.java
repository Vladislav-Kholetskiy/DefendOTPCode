package SpecialTools.controller;

import SpecialTools.dao.UserDao;
import SpecialTools.model.User;
import SpecialTools.util.PasswordHasher;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.Map;

public class RegisterHandler extends BaseHandler implements HttpHandler {

    private static final Logger logger = LoggerFactory.getLogger(RegisterHandler.class);
    private final UserDao userDao = new UserDao();

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        logger.info("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /register —Å –º–µ—Ç–æ–¥–æ–º: {}", exchange.getRequestMethod());

        if (!checkPostMethod(exchange, logger)) {
            return;
        }

        Map<String, String> params = parseRequestBody(exchange);
        String login = params.get("login");
        String password = params.get("password");
        String role = params.get("role");

        logger.info("üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Ä–æ–ª—å: {}", login, role);

        if (login == null || password == null || role == null) {
            logger.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ä–æ–ª—å");
            sendResponse(exchange, 400, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è login, password –∏ role", logger);
            return;
        }

        if ("ADMIN".equalsIgnoreCase(role) && userDao.adminExists()) {
            logger.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            sendResponse(exchange, 403, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", logger);
            return;
        }

        try {
            // Hash password before saving
            String hashed = PasswordHasher.hash(password);
            User user = new User();
            user.setLogin(login);
            user.setPassword(hashed);
            user.setRole(role.toUpperCase());

            userDao.createUser(user);
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–æ–ª—å—é {}", login, role);
            sendResponse(exchange, 200, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", logger);
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {}", e.getMessage());
            sendResponse(exchange, 500, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", logger);
        }
    }
}
