package SpecialTools.controller;

import SpecialTools.dao.UserDao;
import SpecialTools.service.*;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.Map;
import java.util.Optional;

public class GenerateOtpHandler extends BaseHandler implements HttpHandler {
    private static final Logger logger = LoggerFactory.getLogger(GenerateOtpHandler.class);

    private final OtpService otpService = new OtpService();
    private final UserDao userDao = new UserDao();

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        try {
            logger.info("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /generate-otp —Å –º–µ—Ç–æ–¥–æ–º: {}", exchange.getRequestMethod());

            Optional<String> loginOpt = authenticateUser(exchange, logger);
            if (loginOpt.isEmpty()) return;
            String login = loginOpt.get();

            Map<String, String> params = parseRequestBody(exchange);
            String operationId = params.getOrDefault("operationId", "OP_DEFAULT");
            String channel     = params.getOrDefault("channel",     "file");

            int userId = userDao.findUserIdByLogin(login)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            String code = otpService.generateAndStoreOtp(userId, operationId);
            logger.info("üìù OTP-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ {}", login, operationId);

            switch (channel.toLowerCase()) {
                case "email" -> {
                    new EmailSenderService().sendCode(login, code);
                    sendResponse(exchange, 200, "üìß OTP-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ Email", logger);
                }
                case "telegram" -> {
                    new TelegramSenderService().sendCode(code);
                    sendResponse(exchange, 200, "üí¨ OTP-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram", logger);
                }
                case "file" -> {
                    new FileSenderService().sendCodeToFile(login, code);
                    sendResponse(exchange, 200, "üíæ OTP-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª", logger);
                }
                case "sms" -> {
                    new SmsSenderService().sendCode(login, code);
                    sendResponse(exchange, 200, "üì≤ OTP-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ SMS", logger);
                }
                default -> {
                    logger.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {}", channel);
                    sendResponse(exchange, 400, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: " + channel, logger);
                }
            }
        } catch (Exception e) {
            logger.error("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤ GenerateOtpHandler: {}", e.getMessage(), e);
            sendResponse(exchange, 500, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", logger);
        }
    }
}
